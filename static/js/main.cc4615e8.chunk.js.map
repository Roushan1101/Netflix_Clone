{"version":3,"sources":["axios.js","components/Row.js","request.js","Banner.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","console","log","trailerUrl","setTrailerUrl","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchDocumentaries","fetchHorrorMovies","fetchRomanceMovies","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","original_name","overview","substr","Nav","calssName","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc4615e8.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst instance=axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n\r\n})\r\n//instance.get('/foo-bar');\r\n\r\nexport default instance;","import React,{useState,useEffect} from 'react';\r\nimport axios from '../axios'\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}){\r\n    const [movies,setMovies]=useState([]);\r\n\r\n    useEffect(()=>{\r\n//run once if leave the backet empty\r\n//run if the argument given for the dependencies\r\nasync function fetchData(){\r\nconst request=await axios.get(fetchUrl);\r\nsetMovies(request.data.results)\r\nreturn request;\r\n}\r\nfetchData()\r\n},[fetchUrl]);\r\n\r\nconst opts={\r\n    height:\"390\",\r\n    width:\"100%\",\r\n    playerVars:{\r\n        autoplay:1,\r\n    }\r\n}\r\n\r\nconsole.log(movies)\r\n\r\nconst [trailerUrl,setTrailerUrl]=useState(\"\");\r\nconst handleClick=(movie)=>{\r\nif(trailerUrl){\r\n    setTrailerUrl(\"\");\r\n}else {\r\n    movieTrailer(movie?.name || \"\").then((url)=>{\r\nconst urlParams=new URLSearchParams(new URL(url).search);\r\nsetTrailerUrl(urlParams.get(\"v\"));\r\n    }).catch(error=>console.log(error))\r\n}\r\n}\r\n\r\n    return(\r\n    <div className=\"row\">\r\n        <h2>{title}</h2>\r\n        <div className=\"row_posters\">\r\n        {/* Row Posters */}\r\n\r\n        {movies.map(movie=> (\r\n        <img \r\n        key={movie.id}\r\n        onClick={()=>handleClick(movie)}\r\n        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} src={`${base_url}${isLargeRow ? movie.poster_path:movie.backdrop_path}`} />\r\n        ))}\r\n         </div>\r\n         {trailerUrl &&<Youtube videoId={trailerUrl} opts={opts}/>}\r\n    </div>\r\n    )\r\n}\r\nexport default Row;","const API_KEY=\"5a429185276650c7cf70baed495d720f\";\r\n\r\nconst requests={\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`, \r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n   fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`, \r\n   fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n}\r\nexport default requests;","import React,{useEffect, useState} from 'react'\r\nimport axios from './axios'\r\nimport requests from './request';\r\nimport './banner.css'\r\n\r\nfunction Banner(){\r\nconst[movie,setMovie]=useState([]);\r\nuseEffect(()=>{\r\nasync function fetchData(){\r\nconst request=await axios.get(requests.fetchTrending)\r\nsetMovie(\r\n    request.data.results[\r\n    Math.floor(Math.random()* request.data.results.length-1)\r\n    ]\r\n)\r\nconsole.log(movie)\r\n}\r\nfetchData()\r\n},[]);\r\n\r\nfunction truncate(str,n){\r\nreturn str?.length>n?str.substr(0,n-1)+\"...\":str;\r\n}\r\n\r\nreturn(\r\n<header className=\"banner\"\r\nstyle={{\r\nbackgroundSize:\"cover\",\r\nbackgroundImage:`url(\r\n    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n)`,\r\n\r\n}}\r\n>\r\n<div className=\"banner_contents\">\r\n<h1 className=\"banner_title\">\r\n    {movie?.title || movie?.name|| movie?.original_name}\r\n</h1>\r\n<div className=\"banner_buttons\">\r\n    <button className=\"banner_button\">Play</button>\r\n    <button className=\"banner_button\">My List</button>\r\n    </div>\r\n\r\n    <h1 className=\"banner_description\">\r\n    {truncate(movie?.overview,150)}\r\n    </h1>\r\n</div>\r\n<div className=\"banner_fadeBottom\"></div>\r\n</header>\r\n    )\r\n}\r\nexport default Banner;","import React, { useState,useEffect } from 'react';\r\nimport './Navbar.css'\r\n\r\n\r\nfunction Nav(){\r\n\r\n    return(\r\n<div calssName=\"nav\"\r\n\r\n>\r\n<img\r\nclassName=\"nav_logo\"\r\nsrc=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\nalt=\"Netflix Logo\"\r\n\r\n></img>\r\n\r\n<img src=\"https://pbs.twimg.com/profile_images/1198967349312991232/lXeo3AMv_400x400.png\"\r\nclassName=\"nav_avatar\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import './App.css';\nimport Row from './components/Row'\nimport React from 'react';\nimport requests from './request'\nimport Banner from './Banner'\nimport Nav from './Navbar'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav/>\n      <Banner/>\n     <Row \n     isLargeRow={true}\n     title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n     <Row title=\"Netflix Originals\" fetchUrl={requests.fetchNetflixOriginals}/>\n     <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n     <Row title=\"Action\" fetchUrl={requests.fetchActionMovies}/>\n     <Row title=\"Comedy\" fetchUrl={requests.fetchComedyMovies}/>\n     <Row title=\"Horror\" fetchUrl={requests.fetchHorrorMovies}/>\n     <Row title=\"Romance\" fetchUrl={requests.fetchRomanceMovies}/>\n     <Row title=\"Documentries\" fetchUrl={requests.fetchDocumentaries}/>\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}